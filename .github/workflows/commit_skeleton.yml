name: Run rune with skeleton

# Controls when the action will run. Triggers the workflow on pull request labeled testing-before-checkin.
on:
  pull_request_target:
    types: labeled

jobs:
  rune_skeleton:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'testing-before-checkin') }}
    runs-on: ${{ matrix.sgx }}
    strategy:
      matrix:
        sgx: [[self-hosted, SGX1], [self-hosted, SGX2]]
        tag: [ubuntu18.04, centos8.1]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: refs/pull/${{ github.event.pull_request.number }}/merge

    - name: Prepare work
      run: echo "CPU_NUM=$(nproc --all)" >> $GITHUB_ENV

    - name: Create container
      run: |
        if [ '${{ matrix.sgx }}' = '[self-hosted, SGX1]' ]; then
          rune_test=$(docker run -itd --privileged --rm --net host --device /dev/isgx -v $GITHUB_WORKSPACE:/root/inclavare-containers rune-test:${{ matrix.tag }})
        else
          rune_test=$(docker run -itd --privileged --rm --net host --device /dev/sgx/enclave --device /dev/sgx/provision -v $GITHUB_WORKSPACE:/root/inclavare-containers rune-test:${{ matrix.tag }})
        fi;
        echo "rune_test=$rune_test" >> $GITHUB_ENV

    - name: Build and install packages
      run: docker exec $rune_test bash -c "cp -r /root/inclavare-containers /root/inclavare-containers-test;
        cd inclavare-containers-test;
        find ./ -name *.pb.go | xargs -I files touch files;
        make -j${CPU_NUM} && make install -j${CPU_NUM}"

    - name: Start docker daemon
      run: |
        if [ '${{ matrix.tag }}' = 'ubuntu18.04' ]; then
          docker exec $rune_test bash -c "service docker start"
        else
          docker exec $rune_test bash -c "dockerd -b docker0 --storage-driver=vfs &"
        fi;

    - name: Build skeleton docker image
      run: docker exec $rune_test bash -c "cd /root/inclavare-containers-test/rune/libenclave/internal/runtime/pal/skeleton;
        make -j${CPU_NUM} && cp liberpal-skeleton-v*.so /usr/lib;
        docker build . -t skeleton-enclave -f /root/Dockerfile-skeleton"

    - name: Run skeleton v1
      if: always()
      run: docker exec $rune_test bash -c 'docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/usr/lib/liberpal-skeleton-v1.so -e ENCLAVE_RUNTIME_ARGS=debug -e ENCLAVE_RUNTIME_LOGLEVEL="info" skeleton-enclave'

    - name: Run skeleton v2
      if: always()
      run: docker exec $rune_test bash -c "docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/usr/lib/liberpal-skeleton-v2.so -e ENCLAVE_RUNTIME_ARGS=debug -e ENCLAVE_RUNTIME_LOGLEVEL="info" skeleton-enclave"

    - name: Run skeleton v3
      if: always()
      run: docker exec $rune_test bash -c "docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/usr/lib/liberpal-skeleton-v3.so -e ENCLAVE_RUNTIME_ARGS=debug -e ENCLAVE_RUNTIME_LOGLEVEL="info" skeleton-enclave"

    - name: Run skeleton v2 bundle
      if: always()
      run: |
        docker exec $rune_test bash -c "mkdir rootfs;
        docker create --name skeleton-enclave skeleton-enclave;
        docker export skeleton-enclave | tar -C rootfs -xvf -;
        cp /etc/resolv.conf rootfs/etc/resolv.conf;
        mkdir -p /var/run/rune;
        cp /usr/lib/liberpal-skeleton-v2.so /var/run/rune/liberpal-skeleton-v2.so;
        rune spec;
        sed -i '4 c \"terminal\": false,' config.json;
        sed -i '16 c \"cwd\": \"\/\",' config.json;
        rune --debug run ra"

    - name: Generate skeleton ra config.json
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: | 
        docker exec $rune_test bash -c "sed -i '161,163d' config.json;
        sed -i 's/\/var\/run\/rune\/liberpal-skeleton-v2.so/\/usr\/lib\/liberpal-skeleton-v3.so/g' config.json;
        sed -i '10 c  \"sh\",\"wait_timeout\",\"6000\"' config.json;
        sed -i '144 a \"enclave.attestation.ra_epid_is_linkable\": \"false\",' config.json;
        sed -i '144 a \"enclave.attestation.ra_epid_subscription_key\": \"${{ secrets.SUB_KEY }}\",' config.json;
        sed -i '144 a \"enclave.attestation.ra_epid_spid\": \"${{ secrets.SPID }}\",' config.json;
        sed -i '144 a \"enclave.attestation.ra_type\":\"EPID\",' config.json"

    - name: Run skeleton v3 bundle
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: docker exec $rune_test bash -c "rune --debug run skeleton-enclave-container" &

    - name: Wait RA containers Running with rune list command
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      timeout-minutes: 2
      run: |
        docker exec $rune_test bash -c "while true; do
        status=\$(rune list 2>/dev/null | grep skeleton-enclave-container | awk '{print \$3}')
        echo Current status: \$status
        if [[ \$status = 'running' ]]; then
          break
        fi
        sleep 5
        done"

    - name: Get local report with rune attest command
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: docker exec $rune_test bash -c "rune --debug attest --reportFile=/report.bin --quote-type=epidUnlinkable skeleton-enclave-container"

    - name: Get remote report with rune attest command
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: docker exec $rune_test bash -c "rune --debug attest --isRA --quote-type=epidUnlinkable --spid=${{ secrets.SPID }} --subscription-key=${{ secrets.SUB_KEY }} skeleton-enclave-container"

    - name: Kill RA containers with rune kill command
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      timeout-minutes: 3
      run: |
        docker exec $rune_test bash -c "
        status=\$(rune list 2>/dev/null | grep skeleton-enclave-container | awk '{print \$3}')
        echo Current status: \$status
        if [[ \$status = 'running' ]]; then
          echo Killing RA containers...
          rune kill skeleton-enclave-container 9
          while true; do
                status=\$(rune list 2>/dev/null | grep skeleton-enclave-container | awk '{print \$3}')
                echo Current status: \$status
                if [[ \$status = '' ]]; then
                    echo Killing successfully
                    break
                fi
                sleep 5
          done
        fi"

    - name: Get target info with sgx-tools
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: docker exec $rune_test bash -c "cd rootfs;
        sgx-tools -verbose gen-qe-target-info --quote-type=epidUnlinkable"

    - name: Get quote with sgx-tools
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: docker exec $rune_test bash -c "cd rootfs;
        sgx-tools -verbose gen-quote --report report.bin --spid=${{ secrets.SPID }} --quote-type=epidUnlinkable"

    - name: Verify quote with sgx-tools
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: docker exec $rune_test bash -c "cd rootfs;
        sgx-tools -verbose verify-quote --quote quote.bin --spid=${{ secrets.SPID }} --subscription-key=${{ secrets.SUB_KEY }}"

    - name: Kill the container
      run: docker stop $rune_test
